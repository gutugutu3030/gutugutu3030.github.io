/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import io.pebbletemplates.pebble.PebbleEngine;
import io.pebbletemplates.pebble.template.PebbleTemplate;

public class App {
  public static void main(String[] args) throws IOException {
    PebbleEngine engine = new PebbleEngine.Builder().build();
    Map<String, Object> map = new HashMap<>();
    createRootHtml(engine, map);
    createContentsHtml(engine, map);
  }

  private static void createRootHtml(PebbleEngine engine, Map<String, Object> map)
      throws IOException {
    final var newMap = new HashMap<>(map);
    newMap.put("directory", "./");

    Files.list(Paths.get("src/main/resources/root"))
        .filter(Files::isRegularFile)
        .filter(path -> path.toString().endsWith(".html"))
        .forEach(
            path -> {
              PebbleTemplate compiledTemplate = engine.getTemplate("root/" + path.getFileName());
              try (FileWriter writer = new FileWriter("../../" + path.getFileName())) {
                compiledTemplate.evaluate(writer, newMap);
              } catch (IOException e) {
                e.printStackTrace();
              }
            });
  }

  private static void createContentsHtml(PebbleEngine engine, Map<String, Object> map)
      throws IOException {
      Files.list(Paths.get("src/main/resources/contents")).filter(Files::isRegularFile)
              .filter(path -> path.toString().endsWith(".html")).forEach(path -> {
                  PebbleTemplate compiledTemplate =
                          engine.getTemplate("contents/" + path.getFileName());
                  final var directory = Arrays.stream(path.getFileName().toString().split("\\."))
                          .filter(s -> s.length() > 0).filter(s -> !s.equals("html"))
                          .collect(Collectors.joining("/"));
            final var newMap = new HashMap<>(map);
            newMap.put("directory", "./" + "../".repeat(directory.split("/").length + 1));

                  try (FileWriter writer =
                          new FileWriter("../../contents/%s/index.html".formatted(directory))) {
              compiledTemplate.evaluate(writer, newMap);
                  } catch (IOException e) {
                      e.printStackTrace();
                  }
              });
  }
}
